#!/usr/bin/env python3
"""
Complete demonstration of RecSim integration with GAELP.
This script showcases all the user modeling capabilities.
NO FALLBACKS ALLOWED - RecSim is MANDATORY.
"""

import sys
import subprocess
import logging

# NO FALLBACKS - RecSim MUST work
from NO_FALLBACKS import StrictModeEnforcer

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)


def check_and_install_dependencies():
    """Check if RecSim is installed, install if needed - NO FALLBACKS"""
    
    try:
        import recsim_ng
        logger.info("âœ“ RecSim NG already installed")
        return True
    except ImportError:
        logger.info("RecSim NG not found. Installing...")
        
        try:
            # Run the installation script
            result = subprocess.run([sys.executable, "install_recsim.py"], 
                                  capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                logger.info("âœ“ RecSim installation completed")
                return True
            else:
                logger.error(f"Installation script failed: {result.stderr}")
                StrictModeEnforcer.enforce('RECSIM_INSTALLATION', fallback_attempted=True)
                raise RuntimeError("RecSim installation FAILED. Cannot proceed without RecSim. NO FALLBACKS!")
                
        except subprocess.TimeoutExpired:
            logger.error("Installation timed out")
            StrictModeEnforcer.enforce('RECSIM_INSTALLATION', fallback_attempted=True)
            raise RuntimeError("RecSim installation TIMED OUT. Cannot proceed without RecSim. NO FALLBACKS!")
        except Exception as e:
            logger.error(f"Installation failed: {e}")
            StrictModeEnforcer.enforce('RECSIM_INSTALLATION', fallback_attempted=True)
            raise RuntimeError(f"RecSim installation FAILED: {e}. Cannot proceed without RecSim. NO FALLBACKS!")


def run_demonstrations():
    """Run all demonstration scripts"""
    
    demonstrations = [
        {
            'script': 'recsim_user_model.py',
            'description': 'RecSim User Model Test'
        },
        {
            'script': 'enhanced_simulator.py', 
            'description': 'Enhanced Simulator with RecSim Integration'
        },
        {
            'script': 'test_recsim_integration.py',
            'description': 'Comprehensive Integration Test'
        }
    ]
    
    for demo in demonstrations:
        print(f"\n{'='*60}")
        print(f"Running: {demo['description']}")
        print(f"Script: {demo['script']}")
        print('='*60)
        
        try:
            result = subprocess.run([sys.executable, demo['script']], 
                                  timeout=120, text=True)
            
            if result.returncode == 0:
                logger.info(f"âœ“ {demo['description']} completed successfully")
            else:
                logger.error(f"âœ— {demo['description']} FAILED")
                raise RuntimeError(f"Demo {demo['script']} FAILED. All components must work. NO FALLBACKS!")
                
        except subprocess.TimeoutExpired:
            logger.error(f"âœ— {demo['script']} timed out")
            raise RuntimeError(f"Demo {demo['script']} TIMED OUT. All components must work. NO FALLBACKS!")
        except FileNotFoundError:
            logger.error(f"âœ— {demo['script']} not found")
            raise RuntimeError(f"Demo {demo['script']} NOT FOUND. All components must exist. NO FALLBACKS!")
        except Exception as e:
            logger.error(f"âœ— Error running {demo['script']}: {e}")
            raise RuntimeError(f"Demo {demo['script']} FAILED: {e}. All components must work. NO FALLBACKS!")


def show_summary():
    """Show summary of what was implemented"""
    
    print(f"\n{'='*60}")
    print("GAELP RecSim Integration Summary")
    print('='*60)
    
    print("""
ðŸŽ¯ IMPLEMENTED FEATURES:

1. RecSim NG Integration:
   âœ“ MANDATORY RecSim NG installation and dependencies
   âœ“ Created sophisticated user behavior models
   âœ“ Integrated with existing enhanced_simulator.py

2. User Segment Modeling:
   âœ“ Impulse Buyer - High conversion, low price sensitivity
   âœ“ Researcher - High click rate, very low conversion  
   âœ“ Loyal Customer - High conversion for preferred brands
   âœ“ Window Shopper - Low engagement, high price sensitivity
   âœ“ Price Conscious - Conversion depends heavily on price
   âœ“ Brand Loyalist - Strong preference for specific brands

3. Realistic Behavior Patterns:
   âœ“ Time-of-day preferences (morning vs evening engagement)
   âœ“ Device preferences (mobile vs desktop behavior)
   âœ“ Fatigue modeling (users get tired of seeing ads)
   âœ“ Interest dynamics (engagement changes over time)
   âœ“ Price sensitivity modeling
   âœ“ Brand affinity effects

4. Enhanced Simulation Features:
   âœ“ Probabilistic modeling with TensorFlow Probability
   âœ“ Realistic revenue calculations
   âœ“ Time-spent-on-page modeling
   âœ“ User state persistence across interactions
   âœ“ Comprehensive analytics and reporting

5. Integration with GAELP:
   âœ“ Seamless integration with existing auction system
   âœ“ MANDATORY RecSim - NO FALLBACKS ALLOWED
   âœ“ Enhanced reward calculation based on user responses
   âœ“ Real-time user behavior analytics

6. Files Created:
   âœ“ recsim_user_model.py - Core user modeling system
   âœ“ Enhanced enhanced_simulator.py - Integrated simulation
   âœ“ install_recsim.py - Automated installation
   âœ“ test_recsim_integration.py - Comprehensive testing
   âœ“ Updated requirements.txt - All dependencies

ðŸ“Š USER SEGMENT CHARACTERISTICS:

â€¢ Impulse Buyers: 8% CTR, 15% conversion, low price sensitivity
â€¢ Researchers: 12% CTR, 2% conversion, high price sensitivity  
â€¢ Loyal Customers: 15% CTR, 25% conversion, brand focused
â€¢ Window Shoppers: 5% CTR, 1% conversion, very price sensitive
â€¢ Price Conscious: 6% CTR, 8% conversion, extremely price sensitive
â€¢ Brand Loyalists: 18% CTR, 30% conversion, brand obsessed

ðŸš€ USAGE:
   python install_recsim.py          # Install dependencies
   python enhanced_simulator.py      # Run enhanced simulation  
   python test_recsim_integration.py # Run comprehensive tests
   python recsim_user_model.py       # Test user models directly

ðŸ’¡ RecSim integration is MANDATORY for realistic user behavior.
   NO FALLBACKS are allowed - system will fail if RecSim unavailable.
   This ensures proper learning and realistic behavior simulation.
""")


def main():
    """Main demonstration runner"""
    
    print("ðŸŽ¯ GAELP RecSim Integration Demo - NO FALLBACKS ALLOWED")
    print("="*60)
    
    # Check and install dependencies - MANDATORY
    logger.info("Step 1: Checking dependencies...")
    if not check_and_install_dependencies():
        # This should never be reached due to exceptions above
        StrictModeEnforcer.enforce('RECSIM_CRITICAL', fallback_attempted=True)
        raise RuntimeError("RecSim installation check FAILED. NO FALLBACKS ALLOWED!")
    
    print(f"\n{'='*60}")
    print("Step 2: Running demonstrations...")
    
    # Run demonstrations - ALL MUST PASS
    run_demonstrations()
    
    # Show summary
    show_summary()
    
    print(f"\n{'='*60}")
    print("ðŸŽ‰ Demo completed! RecSim integration is MANDATORY and working.")
    print("="*60)


if __name__ == "__main__":
    main()